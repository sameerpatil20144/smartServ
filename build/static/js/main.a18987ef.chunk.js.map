{"version":3,"sources":["cookies/index.js","layout/Header/index.js","layout/defaultLayout.js","route/routes.js","route/index.js","App.js","serviceWorker.js","index.js"],"names":["inFiveMinutes","Date","getTime","setCookie","key","value","Cookies","set","expires","getCookie","get","removeCookie","remove","useStyles","makeStyles","theme","dropdown","right","left","withRouter","props","location","pathname","split","notes","undefined","pageLink","Navbar","expand","className","Brand","title","Toggle","aria-controls","Collapse","id","style","justifyContent","Nav","Link","href","NavDropdown","src","alt","Item","onClick","localStorage","removeItem","history","push","logout","wrapper","padding","Layout","classes","linkName","children","Login","lazy","Dashboard","routes","path","component","isNotRequired","layout","DefaultLayout","isAccessible","pageTitle","ProtectedRoute","Component","rest","render","isLogin","to","state","from","RouterApp","fallback","map","v","k","exact","App","textAlign","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a18987ef.chunk.js","sourcesContent":["import Cookies from 'js-cookie'\nvar inFiveMinutes = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);\nexport const setCookie = (key, value) => {\n    Cookies.set(key, value, {\n        expires: inFiveMinutes\n    })\n}\n\nexport const getCookie = (key) => {\n    const result = Cookies.get(key);\n    return result;\n}\n\nexport const removeCookie = (key, value) => {\n    Cookies.remove(key)\n}","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport { withRouter } from 'react-router'\nimport { removeCookie, getCookie } from '../../cookies'\n\nconst useStyles = makeStyles(theme => ({\n    dropdown: {\n        right: '0',\n        left: '-40px'\n    }\n}));\n\n\nfunction Header(props) {\n\n    var fields\n    if (props.location.pathname) {\n        fields = props.location.pathname.split('/');\n    }\n\n    let notes = (props.pageLink != undefined && props.pageLink == 'notes') ? 'active' : '';\n\n    //Storing ID from Title \n    const classes = useStyles();\n    const logout = (props) => {\n        removeCookie('access_token');\n        removeCookie('name');\n        removeCookie('center_id');\n        removeCookie('doctor_id');\n        removeCookie('patientId');\n        removeCookie('id');\n        removeCookie('role_type');\n        removeCookie(\"bloodGroup\");\n        removeCookie(\"visitDate\");\n        localStorage.removeItem(\"rights\");\n        props.history.push('/');\n    }\n\n    return (\n        <Navbar expand=\"md\" className=\"navbar-wrapper\">\n            <Navbar.Brand>SmartServ</Navbar.Brand>\n            <div className=\"page-title\">{props.title}</div>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\" style={{ justifyContent: 'flex-end' }}>\n                <Nav className=\"d-flex align-items-center\">\n                    <Nav.Link href=\"/notes\" className={notes}>\n                        Notes\n                    </Nav.Link>\n                    <NavDropdown className=\"user-drop\" title={<div>\n                        <img src=\"/images/dummy-user.jpg\" alt=\"\" />\n                        {getCookie('name')}\n                        <i className=\"fas fa-caret-down ml-2\"></i>\n                    </div>}>\n                        <NavDropdown.Item onClick={() => logout(props)}>Logout</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n\n            </Navbar.Collapse>\n        </Navbar >\n    );\n}\n\nexport default withRouter(Header);\n\n\n","\n/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Navbar from '../layout/Header'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        padding: '0 10px'\n    }\n}));\n\nfunction Layout(props) {\n    const classes = useStyles();\n    return (\n        <div>\n            <Navbar title={props.title} pageLink={(props.linkName != undefined) ? props.linkName : ''} />\n            <div className={classes.wrapper}>\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\nexport default Layout\n","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport { lazy } from 'react';\nimport DefaultLayout from '../layout/defaultLayout'\n\nconst Login = lazy(() => import('../components/login'));\nconst Dashboard = lazy(() => import('../components/dashboard'));\nconst Notes = lazy(() => import('../views/notes'));\n\nexport var routes = [\n    {\n        path: '/',\n        component: Login,\n        isNotRequired: true,\n        linkName: ''\n    },\n    {\n        path: '/login',\n        component: Login,\n        isNotRequired: true,\n        linkName: ''\n    },\n    {\n        path: '/logout',\n        component: Login,\n        linkName: ''\n    },\n    {\n        path: '/dashboard',\n        component: Dashboard,\n        layout: DefaultLayout,\n        linkName: '',\n        isAccessible: 'showDashboard'\n    },\n    {\n        path: '/notes',\n        component: Notes,\n        layout: DefaultLayout,\n        pageTitle: 'Notes',\n        linkName: 'notes',\n        isAccessible: \"showMasterIcon\"\n    },\n    {\n        path: '*',\n        component: Dashboard,\n        layout: DefaultLayout,\n        pageTitle: '',\n        linkName: 'quickaccess',\n        isAccessible: 'showMasterIcon'\n    }\n]\n","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport { getCookie } from '../cookies'\nimport { routes } from './routes';\n\nconst RouterApp = (props) => {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Switch>\n                        {\n                            routes.map((v, k) => {\n                                if (v.isNotRequired) {\n                                    return (\n                                        <Route key={k} path={v.path} component={v.component} exact={true} />\n                                    )\n                                } else {\n                                    if (v.isAccessible) {\n                                        return (\n                                            <ProtectedRoute key={k} exact path={v.path} layout={v.layout} component={v.component} pageTitle={v.pageTitle} linkName={v.linkName} />\n                                        )\n                                    }\n                                }\n                            })\n                        }\n                    </Switch>\n                </Suspense>\n            </Router>\n        </div>\n    )\n}\n\nconst ProtectedRoute = ({ layout: Layout, component: Component, pageTitle: pageTitle, linkName: linkName, ...rest }) => {\n    return (\n        <Route {...rest} render={(props) => (\n            isLogin() ?\n                <Layout location={props.location} history={props.history} title={pageTitle} linkName={linkName} >\n                    <Component  {...props} />\n                </Layout >\n                :\n                <Redirect to={{ pathname: '/', state: { from: props.location } }} />\n        )} />\n    )\n};\n\nconst isLogin = () => {\n    const token = getCookie('access_token');\n    if (token) {\n        return true\n    }\n    return false\n}\n\n\nexport default RouterApp; ","/* eslint-disable */\n\nimport React from 'react';\nimport RouterApp from './route';\nimport { Offline, Online } from \"react-detect-offline\";\nimport './App.css'\n\nfunction App(props) {\n    return (\n        <div>\n            <Online>\n                <RouterApp />\n            </Online>\n            <Offline>\n                <div style={{ textAlign: 'center' }}>\n                    <img\n                        alt=\"Offline\"\n                        src=\"/images/wifi_connected.gif\"\n                    />\n                    <p>You're offline right now. Check your connection.</p>\n                </div>\n            </Offline>\n        </div>\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n\n"],"sourceRoot":""}