{"version":3,"sources":["services/index.js","constant.js","helpers/common.js","helpers/textValidator.js","helpers/index.js","components/table/index.js","getDifference/index.js","components/dialog/index.js","views/notes/confirmModal.js","views/notes/index.js","helpers/customHook.js","components/alert/index.js"],"names":["BASE_URL","postRequest","apiName","data","a","async","url","getCookie","token","headers","os","axios","post","result","response","status","removeCookie","window","location","href","responseData","generateErrMsg","Error","message","putRequest","put","getRequest","params","get","deleteRequest","delete","error","msg","statusCode","LOGIN_API","TEST_NOTES","module","exports","setAlertMsg","variant","callback","timeout","setMsg","setTimeout","errMsg","err","cchpi","returnMsg","hasOwnProperty","forEach","element","DropdownIndicator","props","selectProps","dropdownIcon","TextValidator","this","select2","errorMessages","validatorListener","flatpickr","defaultdate","parentClass","id","inputmask","selectedOption","rest","selectClass","as","tableError","errorText","className","label","Form","Label","htmlFor","style","marginTop","getOptionLabel","option","name","getOptionValue","isClearable","components","IndicatorSeparator","onChange","value","target","extra","ref","r","input","options","dateFormat","dateformat","defaultDate","enableTime","enabletime","noCalendar","nocalendar","minDate","mindate","maxDate","maxdate","time_24hr","placeholder","date","mask","Control","postFix","type","state","isValid","color","getErrorMessage","ValidatorComponent","CommonTable","thead","children","Table","responsive","map","v","k","key","getDiff","time","currentTime","t1","moment","t2","diff","Dialog","Modal","centered","Header","closeButton","Title","titleDialog","Body","ConfirmModal","title","show","hideModal","onHide","size","Notes","initialState","note","selectNote","useState","responseWithNoteInfo","setNoteInfo","getRowId","setRowId","setStatus","showModal","setShowModal","disabled","succErrMsg","setSuccErrMsg","getDigitalTime","setDigitalTime","getDone","setDone","getTime","setTime","setCountDown","getActionId","setActionId","getRequestForNotes","length","setInputs","inputs","getIdFromElement","event","descendingData","reverse","useEffect","setInterval","Date","toLocaleTimeString","hour12","resetState","checkAlarm","notes","CURRENT_TIME","toast","info","position","hideProgressBar","closeOnClick","pauseOnHover","draggable","sendData","done","startTimer","console","log","duration","minutes","seconds","timer","parseInt","display","customHooks","e","Time","TIME","format","handleInputChange","handleSubmit","successOnFetchingNotes","cursor","textDecoration","added_on","user_name","whiteSpace","onClick","row","scrollTo","handleChange","Button","addNotes","today","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","newestOnTop","rtl","pauseOnVisibilityChange","onSubmit","deleteNotes","textAlign","fontSize","Row","Group","Col","md","cols","rows","border","validators","useForm","initialValues","preventDefault","typeOfInput","persist","avoidAlphabets","text","replace","avoidHtmlTags","clearState","AlertMsg"],"mappings":"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","file":"static/js/7.1f92f8ed.chunk.js","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport axios from 'axios';\nimport { getCookie, removeCookie } from '../cookies';\nconst BASE_URL = \"https://staging-emr.mecure.com/api/\"\n\nexport const postRequest = async (apiName, data) => {\n    const url = BASE_URL + apiName;\n    const token = await getCookie('access_token');\n    const headers = {};\n    headers.os = \"web\";\n\n    if (token) {\n        headers.token = token\n    }\n\n    try {\n        const result = await axios.post(url, data, { headers: headers });\n        return result.data\n    } catch (error) {\n        const { response } = error\n        if (response) {\n            const { status } = response\n            if (status === 401) {\n                removeCookie('access_token')\n                removeCookie('name');\n                window.location.href = \"/\"\n            }\n        }\n        const responseData = generateErrMsg(error)\n        throw new Error((responseData.message));\n    }\n}\n\nexport const putRequest = async (apiName, data) => {\n    const url = BASE_URL + apiName;\n    const token = await getCookie('access_token');\n    const headers = {};\n    headers.os = \"web\";\n    if (token) {\n        headers.token = token\n    }\n\n    try {\n        const result = await axios.put(url, data, { headers: headers });\n        return result.data\n    } catch (error) {\n        const { response } = error\n        if (response) {\n            const { status } = response\n            if (status === 401) {\n                removeCookie('access_token')\n                removeCookie('name');\n                window.location.href = \"/\"\n            }\n        }\n        const responseData = generateErrMsg(error)\n        throw new Error((responseData.message));\n    }\n}\n\nexport const getRequest = async (apiName, params = '') => {\n    const url = BASE_URL + apiName;\n    const token = await getCookie('access_token');\n    let headers = {};\n    headers.os = \"web\";\n    if (token) {\n        headers.token = token\n    }\n    try {\n        const result = await axios.get(url, { params: params, headers: headers });\n        return result.data\n    } catch (error) {\n        const { response } = error\n        if (response) {\n            const { status } = response\n            if (status === 401) {\n                removeCookie('access_token')\n                removeCookie('name');\n                window.location.href = \"/\"\n            }\n        }\n        const responseData = generateErrMsg(error)\n        throw new Error((responseData.message));\n    }\n}\n\nexport const deleteRequest = async (apiName, data) => {\n    const url = BASE_URL + apiName;\n    const token = await getCookie('access_token');\n    const headers = {};\n    headers.os = \"web\";\n    if (token) {\n        headers.token = token\n    }\n\n    try {\n        const result = await axios.delete(url, { data: data, headers: headers });\n        return result.data\n    } catch (error) {\n        const { response } = error\n        if (response) {\n            const { status } = response\n            if (status === 401) {\n                removeCookie('access_token')\n                removeCookie('name');\n                window.location.href = \"/\"\n            }\n\n        }\n        const responseData = generateErrMsg(error)\n        throw new Error((responseData.message));\n    }\n}\n\nconst generateErrMsg = (error) => {\n\n    const { response } = error\n\n    if (response) {\n        const { data } = response;\n        if (data) {\n            const { msg, status, statusCode } = data\n            const returnMsg = {\n                statusCode: statusCode ? statusCode : 400,\n                message: msg ? msg : \"Something Went Wrong ! Please Try again later\"\n            }\n\n            return returnMsg\n        }\n    } else {\n        const returnMsg = {\n            message: \"Something Went Wrong ! Please Try again later\"\n        }\n        return returnMsg;\n    }\n\n}","//for-login\nexport const LOGIN_API = \"EMR_userLogin\";\n//for-notes\nexport const TEST_NOTES = \"note\";\n\n\n\n\n\n\n","\nmodule.exports = {\n    setAlertMsg: (msg, variant, callback, timeout = 4000) => {\n        const setMsg = {\n            msg: msg,\n            variant: variant\n        }\n        callback(setMsg)\n        setTimeout(() => {\n            callback({})\n        }, timeout)\n    },\n    errMsg: (msg, err, cchpi) => {\n        let returnMsg = msg + '';\n        if (err.hasOwnProperty()) {\n            err.forEach(element => {\n                returnMsg += ` ${element} \\n`\n            });\n        }\n        return returnMsg\n    }\n}","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport React, { type ElementConfig } from 'react';\nimport { ValidatorComponent } from 'react-form-validator-core';\nimport {\n    Form\n} from 'react-bootstrap';\nimport Select, { components } from 'react-select';\nimport 'flatpickr/dist/themes/material_blue.css'\nimport Flatpickr from 'react-flatpickr'\nimport InputMask from \"react-input-mask\";\n\nconst DropdownIndicator = (\n    props: ElementConfig<typeof components.DropdownIndicator>\n) => {\n    return (\n        <components.DropdownIndicator {...props}>\n            {props.selectProps.dropdownIcon}\n        </components.DropdownIndicator>\n    );\n};\n\n\nclass TextValidator extends ValidatorComponent {\n\n    render() {\n        const { errorMessages, validatorListener, select2, flatpickr, defaultdate, parentClass = '', id, dropdownIcon, inputmask, selectedOption, ...rest } = this.props;\n\n        const selectClass = this.props.as == 'select' ? ' type-select ' : '';\n\n        const tableError = this.errorText() !== null ? ' table-error' : '';\n\n        return (\n            <div className={selectClass + parentClass + tableError} >\n                {this.props.label && (\n                    <Form.Label htmlFor={id && id} style={{ marginTop: '15px' }}>{this.props.label}</Form.Label>\n                )}\n\n                {select2 ?\n\n                    <Select\n                        getOptionLabel={option => option.name}\n                        getOptionValue={option => option.id}\n                        isClearable={true}\n                        dropdownIcon={dropdownIcon || <i className=\"fas fa-caret-down\"></i>}\n                        components={{\n                            DropdownIndicator,\n                            IndicatorSeparator: () => null\n                        }}\n                        {...rest}\n                        onChange={\n                            (value) => {\n                                if (value) {\n                                    this.props.onChange({ target: { name: this.props.name, value: value.id, extra: value } })\n                                } else {\n                                    this.props.onChange({ target: { name: this.props.name, id: '' , extra: null } })\n                                }\n                            }\n                        }\n                        ref={(r) => { this.input = r; }}\n                    />\n                    : flatpickr ?\n                        <Flatpickr\n                            className=\"form-control mt-1\"\n                            value={selectedOption}\n                            options={{\n                                dateFormat: this.props.dateformat || \"d-m-Y\",\n                                defaultDate: defaultdate,\n                                enableTime: this.props.enabletime,\n                                noCalendar: this.props.nocalendar,\n                                minDate: this.props.mindate,\n                                maxDate: this.props.maxdate,\n                                time_24hr: true\n                            }}\n                            placeholder=\"dd-mm-yyyy\"\n                            {...rest}\n                            onChange={\n                                (date) =>\n                                    date &&\n                                    this.props.onChange({ target: { name: this.props.name, value: date } })\n                            }\n                            ref={(r) => { this.input = r; }}\n                        />\n                        : inputmask ?\n                            <InputMask\n                                className=\"form-control\"\n                                mask=\"99-99-9999\"\n                                {...rest}\n                                ref={(r) => { this.input = r; }}\n                            />\n                            :\n                            <Form.Control {...rest}\n                                id={id}\n                                ref={(r) => { this.input = r; }} />\n                }\n\n                <span>{this.props.postFix}</span>\n\n                {this.props.type === \"file\" &&\n                    (\n                        <label className=\"custom-file-label\" htmlFor={id}>\n                            {this.props.value || 'Upload Attachment'}\n                        </label>\n                    )\n                }\n\n                <div className=\"error-text\">{this.errorText()}</div>\n            </div>\n        );\n    }\n\n    errorText() {\n        const { isValid } = this.state;\n\n        if (isValid) {\n            return null;\n        }\n\n        return (\n            <div style={{ color: 'red' }}>\n                {this.getErrorMessage()}\n            </div>\n        );\n    }\n}\n\nexport default TextValidator;","\nexport { default as customHooks } from './customHook';\nexport { default as requestWrapper } from './requestWrapper';\nexport { default as constants } from './constants';\nexport { default as TextValidator } from './textValidator';\n","import React from 'react';\nimport { Table } from 'react-bootstrap'\n\nconst CommonTable = ({ thead, children, className }) => {\n\n\n    const Header = ({ thead }) => {\n        return (\n            <thead>\n                <tr>\n                    {\n                        thead.map((v, k) => {\n                            return (\n                                <th key={k}>{v}</th>\n                            )\n                        })\n                    }\n                </tr>\n            </thead>\n        )\n\n\n    }\n\n    return (\n\n        <div className=\"table-border\">\n            <Table responsive className={className}>\n                {thead &&\n                    <Header thead={thead} />\n                }\n                <tbody>\n                    {children}\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n\nexport default CommonTable","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport { getCookie } from '../cookies'\nimport moment from 'moment'\n\nexport const getDiff = (time, currentTime) => {\n    var t1 = moment(time, \"hh:mm:ss\");\n    var t2 = moment(currentTime, \"hh:mm:ss\");\n    var difference = t1.diff(t2, 'seconds')\n    return difference\n}\n","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport React from 'react';\nimport { Modal } from 'react-bootstrap';\n\nexport default function Dialog(props) {\n\n    const { ...rest } = props;\n    return (\n        <div>\n            <Modal\n                centered\n                {...rest}\n            >\n                <Modal.Header closeButton={props.closeButton == false ? false : true}>\n                    <Modal.Title>\n                        {props.titleDialog}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {props.children}\n                </Modal.Body>\n            </Modal>\n        </div>\n    );\n}\n","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport React from \"react\";\nimport Dialog from '../../components/dialog'\n\nconst ConfirmModal = ({ children, title, show, hideModal }) => {\n\n    return (\n        <Dialog titleDialog={title} show={show} onHide={() => hideModal(false)} size=\"md\">\n            {children}\n        </Dialog>\n    )\n}\n\nexport default ConfirmModal","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport { ValidatorForm } from 'react-form-validator-core';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { TextValidator, customHooks } from '../../helpers'\nimport { Form, Col, Button } from 'react-bootstrap';\nimport CommonTable from '../../components/table'\nimport { setAlertMsg } from '../../helpers/common'\nimport AlertBox from '../../components/alert'\nimport moment from 'moment'\nimport { getDiff } from '../../getDifference';\n\n//importing GET/POST/PUT/DELETE request from sevices\nimport { getRequest, postRequest, deleteRequest, putRequest } from '../../services/index'\n\n//importing API endpoint from constant\nimport { TEST_NOTES } from '../../constant';\n\n//import confirm modal box\nimport ConfirmModal from './confirmModal';\n\nconst thead = ['Date', 'Username', 'Note', 'Time', 'Action']\n\nconst Notes = () => {\n\n    const initialState = {\n        note: \"\",\n        selectNote: \"\",\n        time: ''\n    };\n\n\n\n    //[Declaring useState for displaying purposes]\n    //Storing response from TEST_NOTES\n    const [responseWithNoteInfo, setNoteInfo] = useState([]);\n\n    //Storing ID from table \n    const [getRowId, setRowId] = useState('')\n\n    const [status, setStatus] = useState(0)\n\n    //show modal \n    const [showModal, setShowModal] = useState(false)\n\n    const [disabled, setDisabled] = useState(false)\n\n    //displaying success and error on the screen \n    const [succErrMsg, setSuccErrMsg] = useState({});\n\n    //Digital Watch\n    const [getDigitalTime, setDigitalTime] = useState('');\n\n    //Setting up done task\n    const [getDone, setDone] = useState('');\n\n    //timer-time\n    const [getTime, setTime] = useState('');\n    const [countDown, setCountDown] = useState('');\n\n    //get id from element\n    const [getActionId, setActionId] = useState('add')\n\n    const handleSave = async (e) => {\n\n        if (getActionId === \"add\") {\n\n            //function to add data from POST_TEST_NOTES Apiendpoint\n            try {\n\n                var Time = new Date(inputs.time);\n                var TIME = moment(Time).format(\"HH:mm:ss\");\n                var CURRENT_TIME = new Date().toLocaleTimeString('en-US', { hour12: false });\n                if (TIME > CURRENT_TIME) {\n\n                    //Parsing body  \n                    const sendData = {\n                        notes: inputs.note,\n                        time: TIME,\n                        done: '0'\n                    };\n                    setStatus(1);\n\n                    //all data in result variable(calling api named POST_TEST_NOTES)\n                    const result = await postRequest(TEST_NOTES, sendData);\n\n                    //Destructuring the object\n                    const { status, msg } = result;\n\n                    if (status) {\n                        setStatus(0);\n                        getRequestForNotes();\n                        resetState();\n                        setCountDown(0)\n                        setAlertMsg(msg, \"success\", setSuccErrMsg, 4000);\n                    }\n                    else {\n                        setStatus(0);\n                        setAlertMsg(msg, \"danger\", setSuccErrMsg, 4000);\n                    }\n                } else {\n                    setAlertMsg('Time should be greater than current time', \"danger\", setSuccErrMsg, 4000);\n                }\n\n            } catch (error) {\n                const { response } = error;\n                setAlertMsg('Something went wrong!! Please try again later', \"danger\", setSuccErrMsg, 4000);\n            }\n        }\n        else if (getActionId === 'update') {\n\n            //function to add data from PUT_TEST_NOTES Apiendpoint\n            try {\n                var TIME = typeof inputs.time == 'object' ? moment(new Date(inputs.time)).format(\"HH:mm:ss\") : getTime;\n                var CURRENT_TIME = new Date().toLocaleTimeString('en-US', { hour12: false })\n\n                if (TIME >= CURRENT_TIME) {\n                    //Parsing body\n                    const sendData = {\n                        id: getRowId,\n                        notes: inputs.note,\n                        time: TIME,\n                        done: '0'\n                    };\n                    setStatus(1);\n\n                    //all data in result variable(calling api named TEST_NOTES)\n                    const result = await putRequest(TEST_NOTES, sendData);\n\n                    //Destructuring the object\n                    const { status, msg } = result;\n\n                    if (status) {\n                        setStatus(0);\n                        getRequestForNotes();\n                        setCountDown(0)\n                        setAlertMsg(msg, \"success\", setSuccErrMsg, 4000);\n                        getIdFromElement('add');\n                        resetState();\n                    } else {\n                        setStatus(0);\n                        setAlertMsg(msg, \"danger\", setSuccErrMsg, 4000);\n                    }\n                }\n                else {\n                    setAlertMsg('Time should be greater than current time', \"danger\", setSuccErrMsg, 4000);\n                }\n\n            } catch (error) {\n                setAlertMsg('Something went wrong!! Please try again later', \"danger\", setSuccErrMsg, 4000);\n            }\n        }\n\n    }\n\n    //function to get data from note Apiendpoint\n    const getRequestForNotes = async () => {\n        try {\n\n            //all data in result variable(calling api named note)\n            const result = await getRequest(TEST_NOTES);\n            if (result.data.length === 0) {\n                setInputs(inputs => ({\n                    ...inputs,\n                    ...initialState\n                }));\n                getIdFromElement(event = 'add')\n            }\n            //Destructuring the object\n            const { status, data, msg } = result;\n\n            //data is not equal to null\n            if (data != null) {\n\n                //status is equal to true\n                if (status) {\n                    const descendingData = data.reverse()\n                    setNoteInfo(descendingData)\n                }\n            }\n            else {\n                const { msg } = result;\n                setAlertMsg(msg, \"danger\", setSuccErrMsg, 4000)\n            }\n\n        } catch (error) {\n            setAlertMsg('Something went wrong!! Please try again later', \"danger\", setSuccErrMsg, 4000)\n        }\n    }\n\n    //calling function to get API call \n    useEffect(() => {\n        setInterval(() => {\n            setDigitalTime(new Date().toLocaleTimeString('en-US', { hour12: false }))\n        }, 1000);\n        getRequestForNotes();\n    }, [])\n\n    // function to get prefield\n    const handleChange = (row) => {\n\n        //scroll to top after clicking SelectNote button\n        window.scrollTo(100, 0)\n        var CURRENT_TIME = new Date().toLocaleTimeString('en-US', { hour12: false })\n        if (row.time > CURRENT_TIME) {\n            setInterval(() => {\n                checkAlarm(row.time, row.notes);\n            }, 1000)\n        }\n\n        //storing rowId in rowID state\n        setRowId(row.id)\n        setTime(row.time)\n        setDone(row.done)\n\n        //inputs prefield\n        setInputs(inputs => ({\n            ...inputs,\n            note: row.notes,\n            added_on: row.added_on,\n            user_name: row.user_name,\n            time: row.time,\n            done: row.done\n        }));\n    }\n\n    //function to hide modal over delete button\n    const hideModal = () => {\n        setShowModal(false)\n    }\n\n\n    //getting previous state\n    const resetState = async () => {\n        setInputs(inputs => ({\n            ...inputs,\n            ...initialState\n        }))\n    }\n\n    const handleRowId = (row) => {\n        setRowId(row)\n    }\n    const checkAlarm = async (time, notes) => {\n        let CURRENT_TIME = new Date().toLocaleTimeString('en-US', { hour12: false })\n        let diff = getDiff(time, CURRENT_TIME)\n        if (time === CURRENT_TIME) {\n            setDone('1');\n            toast.info('Its time!!', {\n                position: \"top-center\",\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true\n            });\n\n            let sendData = {\n                id: getRowId,\n                done: '1',\n                notes: notes,\n                time: time\n            }\n\n            await putRequest(TEST_NOTES, sendData);\n            if (status) {\n                getRequestForNotes();\n                setCountDown('')\n            }\n\n        } else if (diff === 300) {\n            var fiveMinutes = 60 * 5\n            toast.info('Reminder-Time up in 5 mintues !!', {\n                position: \"top-center\",\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true\n            });\n            startTimer(fiveMinutes)\n        }\n        else {\n            console.log('not yet')\n        }\n    }\n\n    //countdown\n    const startTimer = (duration) => {\n        var timer = duration, minutes, seconds;\n        setInterval(() => {\n            minutes = parseInt(timer / 60, 10);\n            seconds = parseInt(timer % 60, 10);\n            minutes = minutes < 10 ? \"0\" + minutes : minutes;\n            seconds = seconds < 10 ? \"0\" + seconds : seconds;\n            var display = minutes + \":\" + seconds;\n            console.log('countDown: ', display)  //setting up countdown\n            setCountDown(display)\n            if (--timer < 0) {\n                timer = duration;\n            }\n        }, 1000);\n    }\n\n    //function to remove Note\n    const deleteNotes = async () => {\n        try {\n            //Parsing body\n            const sendData = {\n                id: getRowId\n            }\n\n            //all data in result variable(calling api named note)\n            const result = await deleteRequest(TEST_NOTES, sendData);\n\n            //Destructuring the object\n            const { status, msg } = result;\n            if (status) {\n                getRequestForNotes();\n                setShowModal(false)\n                resetState()\n                setAlertMsg(msg, \"success\", setSuccErrMsg, 4000)\n            }\n            else {\n                setAlertMsg(msg, \"danger\", setSuccErrMsg, 4000)\n                setShowModal(false)\n                resetState()\n            }\n        } catch (error) {\n            setAlertMsg('Something went wrong!! Please try again later', \"danger\", setSuccErrMsg, 4000)\n        }\n    }\n\n    const { inputs, handleInputChange, handleSubmit, setInputs } = customHooks(initialState, handleSave)\n\n    //displaying table with status=1 [GET TEST_NOTES]\n    const successOnFetchingNotes = (\n        <div style={{ marginTop: '15px' }}>\n            <CommonTable className=\"action-list table-selected\" thead={thead} >\n                {responseWithNoteInfo && responseWithNoteInfo.map((v, k) => {\n                    return (\n                        <tr className={v.id == getRowId ? \"row-selected\" : null} key={v.id}>\n                            <td style={{\n                                cursor: 'pointer',\n                                textDecoration: ((getDone === '1' && v.id == getRowId) || v.done === \"1\") ? \"line-through\" : \"none\"\n                            }}>{v.added_on}</td>\n                            <td style={{\n                                cursor: 'pointer',\n                                textDecoration: ((getDone === '1' && v.id == getRowId) || v.done === \"1\") ? \"line-through\" : \"none\"\n                            }}>{v.user_name}</td>\n                            <td style={{\n                                cursor: 'pointer',\n                                textDecoration: ((getDone === '1' && v.id == getRowId) || v.done === \"1\") ? \"line-through\" : \"none\",\n                                whiteSpace: \"pre-wrap\"\n                            }}>{v.notes}</td>\n                            <td style={{\n                                cursor: 'pointer',\n                                textDecoration: ((getDone === '1' && v.id == getRowId) || v.done === \"1\") ? \"line-through\" : \"none\",\n                                whiteSpace: \"pre-wrap\"\n                            }}>{v.time}</td>\n                            <td>\n                                <button className=\"check-icon-btn\" onClick={() => { handleChange(v); getIdFromElement('updatex') }}>\n                                </button>\n                                <Button size=\"sm\" className=\"fa-button\" variant=\"outline-secondary\" onClick={() => { handleRowId(v.id); setShowModal(true) }}>\n                                    <i className=\"fa fa-trash\"></i>\n                                </Button>\n                            </td>\n                        </tr>\n                    )\n                })}\n            </CommonTable>\n        </div>\n    )\n\n    // switch add button to update on click of button named Select note\n    const getIdFromElement = (event) => {\n        setActionId(event)\n    }\n\n    //button for add note\n    const addNotes = (\n        <Button type=\"submit\" variant=\"primary\" id=\"add\" onClick={() => { getIdFromElement('add'); }} disabled={status === 1 ? true : false}>Add</Button>\n    )\n\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n\n    today = dd + '-' + mm + '-' + yyyy;\n\n    return (\n        <div>\n            <ToastContainer position=\"top-center\" hideProgressBar={true} newestOnTop={false} closeOnClick rtl={false} pauseOnVisibilityChange draggable pauseOnHover />\n            {\n                <ValidatorForm onSubmit={handleSubmit}>\n                    <ConfirmModal hideModal={hideModal} show={showModal} title=\"Are you sure you want to remove this record ?\"  >\n                        <div>\n                            <Button type=\"submit\" variant=\"primary\" onClick={() => { deleteNotes(); resetState(); getIdFromElement('add') }} disabled={disabled} >Yes</Button>\n                            <Button variant=\"outline-secondary\" onClick={() => { setShowModal(false) }}>Cancel</Button>\n                        </div>\n                    </ConfirmModal>\n\n                    {succErrMsg && succErrMsg.msg &&\n                        <AlertBox msg={succErrMsg.msg} variant={succErrMsg.variant} />\n                    }\n\n                    <div style={{ textAlign: 'center' }}>\n                        <b style={{ fontSize: '20px' }}>{today}</b>\n                    </div>\n                    <div style={{ textAlign: 'center' }}>\n                        <b style={{ fontSize: '20px' }}>{getDigitalTime}</b>\n                    </div>\n                    {/* <div style={{ textAlign: 'center' }}>\n                        <b style={{ fontSize: '20px' }}>{countDown}</b>\n                    </div> */}\n                    <Form.Row>\n                        <Form.Group as={Col} md={12}>\n                            <TextValidator label=\"Note\" onChange={(event) => handleInputChange(event, 'inputTextArea')} name=\"note\" as=\"textarea\" id=\"\" cols=\"50\" rows=\"5\" style={{ border: \"solid 1px lightgray\" }}\n                                rows=\"3\" value={inputs.note} validators={['required']} errorMessages={['This filed is required']} />\n                        </Form.Group>\n                        <Form.Group as={Col} md={3}>\n                            <TextValidator\n                                label=\"Time\"\n                                flatpickr={true}\n                                name=\"time\"\n                                dateformat=\"H:i:s\"\n                                enabletime=\"true\"\n                                nocalendar=\"true\"\n                                placeholder=\"hh:mm:ss\"\n                                onChange={handleInputChange}\n                                value={inputs.time}\n                                validators={['required']}\n                                errorMessages={['This filed is required']}\n                            />\n                        </Form.Group>\n                    </Form.Row>\n\n                    {(getActionId === 'add') ? addNotes : (\n                        <div>\n                            <Button type=\"submit\" variant=\"primary\" id=\"update\" onClick={() => getIdFromElement('update')} disabled={status === 1 ? true : false}>Update</Button>\n                            <Button variant=\"outline-secondary\" onClick={() => { { resetState(); getIdFromElement('add') } }}>Cancel</Button>\n                        </div>\n                    )}\n\n                    {responseWithNoteInfo.length ? successOnFetchingNotes : <div style={{ marginTop: '20px', textAlign: 'center' }}><b>\"There are no records to display\"</b></div>}\n\n                </ValidatorForm>\n            }\n        </div>\n    );\n}\n\nexport default Notes;\n\n\n\n\n\n","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport { useState } from 'react';\n\nconst useForm = (initialValues, callback) => {\n  const [inputs, setInputs] = useState(initialValues);\n  const handleSubmit = async (event) => {\n    if (event) event.preventDefault();\n    callback();\n  }\n\n\n\n  const handleInputChange = (event, typeOfInput) => {\n\n    if (typeof event.persist === \"function\") {\n      event.persist();\n    }\n    if (typeOfInput === \"isNumber\") {\n      const regex = /^[a-zA-Z!”$%&’()*\\+,\\/;\\[\\\\\\]\\^_`\"{|}^~'{}<>:?/,-]+$/;\n      var text = event.target.value\n      var avoidAlphabets = text.replace(regex, \"\")\n      setInputs(inputs => ({ ...inputs, [event.target.name]: avoidAlphabets }));\n    }\n    else if (typeOfInput === \"notEqualToZero\") {\n      var text = event.target.value\n      if (text === \"00\" || text === \"0\") {\n        var avoidHtmlTags = text.replace(\"\")\n        setInputs(inputs => ({ ...inputs, [event.target.name]: '' }));\n      }\n      else if (text === \"-\") {\n        var avoidHtmlTags = text.replace(\"\")\n        setInputs(inputs => ({ ...inputs, [event.target.name]: '' }));\n      }\n      else {\n        setInputs(inputs => ({ ...inputs, [event.target.name]: event.target.value }));\n      }\n    }\n    else if (typeOfInput === \"inputTextArea\") {\n      var regex = /(<([^>]+)>)/ig;\n      var text = event.target.value\n      var avoidHtmlTags = text.replace(regex, \"\")\n      setInputs(inputs => ({ ...inputs, [event.target.name]: avoidHtmlTags }));\n    } else if (event.target.extra) {\n      setInputs(inputs => ({ ...inputs, [event.target.name]: { name: event.target.extra.name, id: event.target.value } }));\n    }\n    else {\n      setInputs(inputs => ({ ...inputs, [event.target.name]: event.target.value }));\n    }\n  }\n\n  //common function for clearing states.\n  const resetState = (clearState) => {\n    setInputs(inputs => ({\n      ...inputs,\n      ...clearState\n    }))\n  }\n\n  return {\n    handleSubmit,\n    handleInputChange,\n    inputs,\n    setInputs,\n    resetState\n  };\n}\nexport default useForm;","/* eslint-disable no-undef */\n/* eslint-disable */\n/* eslint-disable no-console */\nimport React, { useState } from 'react'\nimport { Alert } from 'react-bootstrap'\n\nconst AlertMsg = ({ variant, msg }) => {\n    return (\n        <Alert variant={variant}>\n            {msg}\n        </Alert>\n    )\n}\n\nexport default AlertMsg;"],"sourceRoot":""}